generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Zone {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  code            String        @unique
  name            String        @db.String(100)
  description     String?       @db.String(500)
  isActive        Boolean       @default(true)
  slug            String?       @unique
  searchableText  String?
  areas           Area[]        @relation("ZoneToAreas")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([code, isActive])
  @@index([name, description], type: "text")
}

model Area {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  zone        Zone      @relation(fields: [zoneId], references: [id])
  zoneId      String    @db.ObjectId
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  zone        Zone          @relation(fields: [zoneId], references: [id])
  zoneId      String        @db.ObjectId
  area        Area          @relation(fields: [areaId], references: [id])
  areaId      String        @db.ObjectId
  memberCode  String        @unique
  name        String        @db.String(100)
  mobile      String        @unique
  email       String?       @unique
  nidNo       String        @unique
  address     String?       @db.String(500)
  mapLocation String?
  username    String?       @unique
  password    String?
  image       String?
  packages    Package[]     @relation("UserToPackages")
  accounts    Account[]     @relation("UserToAccounts")
  transactions Transaction[] @relation("UserToTransactions")
  status      String        @default("active")
  role        String        @default("user")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([zoneId, areaId])
  @@index([status])
  @@index([role])
}

model Package {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @db.String(100)
  description String?   @db.String(500)
  speed       String
  price       Float
  provider    String    @db.String(100)
  users       User[]    @relation("UserToPackages")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([provider, speed])
}

model Transaction {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  transactionId   String    @unique
  amount          Float
  package         Package   @relation(fields: [packageId], references: [id])
  packageId       String    @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  transactionDate DateTime  @default(now())
  modeOfPayment   String    @db.String(50)
  remarks         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId, transactionDate])
  @@index([packageId, transactionDate])
}

model AccountsType {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  accountsId  String    @unique
  accountsName String
  accountsType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  voucherId     String          @unique
  accountInfo   AccountInfo[]
  accountType   String
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.ObjectId
  amount        Float
  remarks       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([voucherId])
  @@index([userId])
  @@index([createdAt])
}

model AccountInfo {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId       String
  accountName     String
  amount          Float
  transactionDate DateTime  @default(now())
  transactionId   String    @unique
  remarks         String?
  account         Account   @relation(fields: [accountId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([transactionDate])
}

model Asset {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  value       Float
  type        String    @db.String(50)
  location    String?
  purchasedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([purchasedAt])
}

model AdminUser {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String    @unique
  password    String
  role        String    @default("admin")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([username])
  @@index([role])
}